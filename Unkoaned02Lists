Unkoaned 2. Lists

Lists can be expressed by function or a quoted form

user=> (list 1 2 3 4 5)
(1 2 3 4 5)

user=> (quote (1 2 3 4 5))
(1 2 3 4 5)
user=> '(1 2 3 4 5)
(1 2 3 4 5)

They are Clojure seqs (sequences), so they allow access to the first

user=> (first '(1 2 3 4 5))
1

As well as the rest

user=> (rest '(1 2 3 4 5))
(2 3 4 5)

Count your blessings

user=> (count '(dracula dooku chocula))
3

Before they are gone

user=> (count '())
0

The rest, when nothing is left, is empty

user=> (rest '(100))
()

Construction by adding an element to the front is easy

user=> (cons :a '(:b :c :d :e))
(:a :b :c :d :e)

Conjoining an element to a list is strikingly similar

user=> (conj '(:b :c :d :e) :a)
(:a :b :c :d :e)

You can use a list like a stack to get the first element

user=> (peek '(:a :b :c :d :e))
:a

Or the others

user=> (pop '(:a :b :c :d :e))
(:b :c :d :e)