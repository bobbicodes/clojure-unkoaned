Unkoaned 8. High order functions

The map function relates a sequence to another

user=> (map (fn [x] (* 4 x)) [1 2 3])
(4 8 12)

You may create that mapping

user=> (map (fn [x] (* x x)) [1 2 3 4 5])
(1 4 9 16 25)

Or use the names of existing functions

user=> (map nil? [:a :b nil :c :d])
(false false true false false)

A filter can be strong

user=> (filter (fn [x] false) '(:anything :goes :here))
()

Or very weak

user=> (filter (fn [x] true) '(:anything :goes :here))
(:anything :goes :here)

Or somewhere in between

user=> (filter (fn [x] (< x 40)) [10 20 30 40 50 60 70 80])
[10 20 30]

Maps and filters may be combined

user=> (map (fn [x] (* x 10)) (filter (fn [x] (< x 4)) [1 2 3 4 5 6 7 8]))
[10 20 30]

Reducing can increase the result

user=> (reduce (fn [a b] (* a b)) [1 2 3 4])
24

You can start somewhere else

user=> (reduce (fn [a b] (* a b)) 100 [1 2 3 4])
2400

Numbers are not the only things one can reduce

user=> (reduce (fn [a b] (if (< (count a) (count b)) b a))
         ["which" "word" "is" "longest"])
"longest"